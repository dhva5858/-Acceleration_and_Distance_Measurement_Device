
DataAcquisition.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  00000cba  00000d4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000094  008001a2  008001a2  00000e90  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000eec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000109f  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000062f  00000000  00000000  000020ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009dd  00000000  00000000  0000272e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  0000310c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a9  00000000  00000000  000033b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009a0  00000000  00000000  00003759  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000040f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_13>
  38:	0c 94 cb 02 	jmp	0x596	; 0x596 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 33       	cpi	r26, 0x36	; 54
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  8a:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <AdcInit>:
void TogglePortD(uint8_t Pin)
/*
Toggles the selected pin.
*/
{
	PORTD ^= (1 << Pin);
  92:	84 e8       	ldi	r24, 0x84	; 132
  94:	86 b9       	out	0x06, r24	; 6
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	87 b9       	out	0x07, r24	; 7
  9a:	36 9a       	sbi	0x06, 6	; 6
  9c:	36 99       	sbic	0x06, 6	; 6
  9e:	fe cf       	rjmp	.-4      	; 0x9c <AdcInit+0xa>
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	95 b1       	in	r25, 0x05	; 5
  a4:	08 95       	ret

000000a6 <ReadChannel>:
  a6:	97 b1       	in	r25, 0x07	; 7
  a8:	90 7e       	andi	r25, 0xE0	; 224
  aa:	8f 71       	andi	r24, 0x1F	; 31
  ac:	89 2b       	or	r24, r25
  ae:	87 b9       	out	0x07, r24	; 7
  b0:	36 9a       	sbi	0x06, 6	; 6
  b2:	36 99       	sbic	0x06, 6	; 6
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <ReadChannel+0xc>
  b6:	84 b1       	in	r24, 0x04	; 4
  b8:	95 b1       	in	r25, 0x05	; 5
  ba:	08 95       	ret

000000bc <PortInit>:
  bc:	87 ee       	ldi	r24, 0xE7	; 231
  be:	81 bb       	out	0x11, r24	; 17
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	08 95       	ret

000000c6 <ReadPortD>:
uint8_t ReadPortD(uint8_t Pin)
/*
Returns the value of the selected pin.
*/
{
  return(1 & (PIND >> Pin));
  c6:	20 b3       	in	r18, 0x10	; 16
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	a9 01       	movw	r20, r18
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <ReadPortD+0xc>
  ce:	55 95       	asr	r21
  d0:	47 95       	ror	r20
  d2:	8a 95       	dec	r24
  d4:	e2 f7       	brpl	.-8      	; 0xce <ReadPortD+0x8>
  d6:	ca 01       	movw	r24, r20
}
  d8:	81 70       	andi	r24, 0x01	; 1
  da:	08 95       	ret

000000dc <fifo_init>:

void fifo_init (fifo_t *f, uint8_t *buffer, const uint8_t size)
/*
FIFO is initialized.
*/
{
  dc:	fc 01       	movw	r30, r24
	f->count = 0;
  de:	10 82       	st	Z, r1
	f->pread = f->pwrite = buffer;
  e0:	75 83       	std	Z+5, r23	; 0x05
  e2:	64 83       	std	Z+4, r22	; 0x04
  e4:	73 83       	std	Z+3, r23	; 0x03
  e6:	62 83       	std	Z+2, r22	; 0x02
	f->read2end = f->write2end = f->size = size;
  e8:	41 83       	std	Z+1, r20	; 0x01
  ea:	47 83       	std	Z+7, r20	; 0x07
  ec:	46 83       	std	Z+6, r20	; 0x06
  ee:	08 95       	ret

000000f0 <fifo_put>:

uint8_t fifo_put (fifo_t *f, const uint8_t data)
/*
Put single character inti FIFO.
*/
{
  f0:	fc 01       	movw	r30, r24
_inline_fifo_put (fifo_t *f, const uint8_t data)
/*
Put single character inti FIFO.
*/
{
	if (f->count >= f->size)
  f2:	90 81       	ld	r25, Z
  f4:	81 81       	ldd	r24, Z+1	; 0x01
  f6:	98 17       	cp	r25, r24
  f8:	b8 f4       	brcc	.+46     	; 0x128 <fifo_put+0x38>
		return 0;
		
	uint8_t * pwrite = f->pwrite;
  fa:	a4 81       	ldd	r26, Z+4	; 0x04
  fc:	b5 81       	ldd	r27, Z+5	; 0x05
	
	*(pwrite++) = data;
  fe:	9d 01       	movw	r18, r26
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	6c 93       	st	X, r22
	
	uint8_t write2end = f->write2end;
 106:	87 81       	ldd	r24, Z+7	; 0x07
	
	if (--write2end == 0)
 108:	81 50       	subi	r24, 0x01	; 1
 10a:	19 f4       	brne	.+6      	; 0x112 <fifo_put+0x22>
	{
		write2end = f->size;
 10c:	81 81       	ldd	r24, Z+1	; 0x01
		pwrite -= write2end;
 10e:	28 1b       	sub	r18, r24
 110:	31 09       	sbc	r19, r1
	}
	
	f->write2end = write2end;
 112:	87 83       	std	Z+7, r24	; 0x07
	f->pwrite = pwrite;
 114:	35 83       	std	Z+5, r19	; 0x05
 116:	24 83       	std	Z+4, r18	; 0x04

	uint8_t sreg = SREG;
 118:	9f b7       	in	r25, 0x3f	; 63
	cli();
 11a:	f8 94       	cli
	f->count++;
 11c:	80 81       	ld	r24, Z
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	80 83       	st	Z, r24
	SREG = sreg;
 122:	9f bf       	out	0x3f, r25	; 63
	
	return 1;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	08 95       	ret
/*
Put single character inti FIFO.
*/
{
	if (f->count >= f->size)
		return 0;
 128:	80 e0       	ldi	r24, 0x00	; 0
	return _inline_fifo_put (f, data);
}
 12a:	08 95       	ret

0000012c <StartTimer0Interrupt>:
void StartTimer0Interrupt(void)
/*
The timer 0 is initialized to generate an interrupt every 15 ms.
*/
{
  OCR0 = 234;			// 15 ms period
 12c:	8a ee       	ldi	r24, 0xEA	; 234
 12e:	8c bf       	out	0x3c, r24	; 60
  TCNT0 = 0;			// counter reset
 130:	12 be       	out	0x32, r1	; 50
  TCCR0 = 0B00001101;	// start timer with prescaler of 1024 in clear timer on compare match mode (CTC)
 132:	8d e0       	ldi	r24, 0x0D	; 13
 134:	83 bf       	out	0x33, r24	; 51
  TIMSK |= (1<<OCIE0);	// timer 0 output compare match interrupt enable
 136:	89 b7       	in	r24, 0x39	; 57
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	89 bf       	out	0x39, r24	; 57
 13c:	08 95       	ret

0000013e <InitialiseHardware>:
volatile uint16_t intnum=0;
volatile uint8_t *bufcounter;

void InitialiseHardware(void)
{
	sei();							// enables interrupts by setting the global interrupt mask
 13e:	78 94       	sei
	AdcInit();						// initializes the a/d converter
 140:	0e 94 49 00 	call	0x92	; 0x92 <AdcInit>
	bufcounter = uart_init(19200);	// initializes the UART for the given baudrate
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	7b e4       	ldi	r23, 0x4B	; 75
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 37 02 	call	0x46e	; 0x46e <uart_init>
 150:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <bufcounter+0x1>
 154:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <bufcounter>
	PortInit();						// initializes the port settings
 158:	0e 94 5e 00 	call	0xbc	; 0xbc <PortInit>
	StartTimer0Interrupt();			// timer 0 interrupt for 15 ms
 15c:	0e 94 96 00 	call	0x12c	; 0x12c <StartTimer0Interrupt>
 160:	08 95       	ret

00000162 <main>:
After initializing the interfaces and "Hello World" is send to the serial port.
In a period of a second port pin D7 is toggled and sample data are send to the 
serial port. These sample data contain an index, analog data input, digital port 
inputs and an interrupt counter.
*/
{
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	c3 54       	subi	r28, 0x43	; 67
 16c:	d1 09       	sbc	r29, r1
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
	char Text[64];
	int32_t V_100,V_0,V_U,T_U;
	int32_t a0;
	int32_t a1;
	
	InitialiseHardware(); 
 178:	0e 94 9f 00 	call	0x13e	; 0x13e <InitialiseHardware>
	sprintf( Text,"\r\nWelocme to Temperature Measurement\r\n");
 17c:	87 e2       	ldi	r24, 0x27	; 39
 17e:	e0 e6       	ldi	r30, 0x60	; 96
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	de 01       	movw	r26, r28
 184:	11 96       	adiw	r26, 0x01	; 1
 186:	01 90       	ld	r0, Z+
 188:	0d 92       	st	X+, r0
 18a:	8a 95       	dec	r24
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0x24>
	uart_puts (Text); _delay_ms(1000);
 18e:	ce 01       	movw	r24, r28
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uart_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	83 ed       	ldi	r24, 0xD3	; 211
 19a:	90 e3       	ldi	r25, 0x30	; 48
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x3a>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x44>
 1a6:	00 00       	nop
	sprintf( Text,"\r\nPlease dip the sensor in ice and press the push button\r\n");
 1a8:	8b e3       	ldi	r24, 0x3B	; 59
 1aa:	e7 e8       	ldi	r30, 0x87	; 135
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	de 01       	movw	r26, r28
 1b0:	11 96       	adiw	r26, 0x01	; 1
 1b2:	01 90       	ld	r0, Z+
 1b4:	0d 92       	st	X+, r0
 1b6:	8a 95       	dec	r24
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <main+0x50>
	uart_puts (Text); _delay_ms(1000);
 1ba:	ce 01       	movw	r24, r28
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uart_puts>
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	83 ed       	ldi	r24, 0xD3	; 211
 1c6:	90 e3       	ldi	r25, 0x30	; 48
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <main+0x66>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x70>
 1d2:	00 00       	nop
	
	while(ReadPortD(3)); // Read Temp at 0  degree
 1d4:	83 e0       	ldi	r24, 0x03	; 3
 1d6:	0e 94 63 00 	call	0xc6	; 0xc6 <ReadPortD>
 1da:	81 11       	cpse	r24, r1
 1dc:	fb cf       	rjmp	.-10     	; 0x1d4 <main+0x72>
	
	V_0=ReadChannel(6);
 1de:	86 e0       	ldi	r24, 0x06	; 6
 1e0:	0e 94 53 00 	call	0xa6	; 0xa6 <ReadChannel>
 1e4:	4c 01       	movw	r8, r24
 1e6:	a1 2c       	mov	r10, r1
 1e8:	b1 2c       	mov	r11, r1
	//V_0=(3*Value_0)/1023;
	sprintf( Text,"\r\n V_0 = %ld",V_0);
 1ea:	1f 92       	push	r1
 1ec:	1f 92       	push	r1
 1ee:	9f 92       	push	r9
 1f0:	8f 93       	push	r24
 1f2:	82 ec       	ldi	r24, 0xC2	; 194
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	9f 93       	push	r25
 1f8:	8f 93       	push	r24
 1fa:	8e 01       	movw	r16, r28
 1fc:	0f 5f       	subi	r16, 0xFF	; 255
 1fe:	1f 4f       	sbci	r17, 0xFF	; 255
 200:	1f 93       	push	r17
 202:	0f 93       	push	r16
 204:	0e 94 71 03 	call	0x6e2	; 0x6e2 <sprintf>
	uart_puts (Text); _delay_ms(1000);
 208:	c8 01       	movw	r24, r16
 20a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uart_puts>
 20e:	2f ef       	ldi	r18, 0xFF	; 255
 210:	83 ed       	ldi	r24, 0xD3	; 211
 212:	90 e3       	ldi	r25, 0x30	; 48
 214:	21 50       	subi	r18, 0x01	; 1
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <main+0xb2>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0xbc>
 21e:	00 00       	nop
	
	sprintf( Text,"\r\nPlease dip the sensor in boiling water and press the push button\r\n");
 220:	85 e4       	ldi	r24, 0x45	; 69
 222:	ef ec       	ldi	r30, 0xCF	; 207
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	d8 01       	movw	r26, r16
 228:	01 90       	ld	r0, Z+
 22a:	0d 92       	st	X+, r0
 22c:	8a 95       	dec	r24
 22e:	e1 f7       	brne	.-8      	; 0x228 <main+0xc6>
	uart_puts (Text); _delay_ms(1000);
 230:	c8 01       	movw	r24, r16
 232:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uart_puts>
 236:	2f ef       	ldi	r18, 0xFF	; 255
 238:	83 ed       	ldi	r24, 0xD3	; 211
 23a:	90 e3       	ldi	r25, 0x30	; 48
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0xda>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0xe4>
 246:	00 00       	nop
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	f8 94       	cli
 24c:	de bf       	out	0x3e, r29	; 62
 24e:	0f be       	out	0x3f, r0	; 63
 250:	cd bf       	out	0x3d, r28	; 61
	
	while(ReadPortD(3)); // Read Temp at 100 degree
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	0e 94 63 00 	call	0xc6	; 0xc6 <ReadPortD>
 258:	81 11       	cpse	r24, r1
 25a:	fb cf       	rjmp	.-10     	; 0x252 <main+0xf0>
	
	V_100=ReadChannel(6);
 25c:	86 e0       	ldi	r24, 0x06	; 6
 25e:	0e 94 53 00 	call	0xa6	; 0xa6 <ReadChannel>
 262:	6c 01       	movw	r12, r24
 264:	e1 2c       	mov	r14, r1
 266:	f1 2c       	mov	r15, r1
	/*	V_100=(3*Value_100)/1023;*/
	sprintf( Text,"\r\n V_100 = %ld",V_100);
 268:	1f 92       	push	r1
 26a:	1f 92       	push	r1
 26c:	df 92       	push	r13
 26e:	8f 93       	push	r24
 270:	84 e1       	ldi	r24, 0x14	; 20
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	9f 93       	push	r25
 276:	8f 93       	push	r24
 278:	8e 01       	movw	r16, r28
 27a:	0f 5f       	subi	r16, 0xFF	; 255
 27c:	1f 4f       	sbci	r17, 0xFF	; 255
 27e:	1f 93       	push	r17
 280:	0f 93       	push	r16
 282:	0e 94 71 03 	call	0x6e2	; 0x6e2 <sprintf>
	uart_puts (Text); _delay_ms(1000);
 286:	c8 01       	movw	r24, r16
 288:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uart_puts>
 28c:	9f ef       	ldi	r25, 0xFF	; 255
 28e:	23 ed       	ldi	r18, 0xD3	; 211
 290:	80 e3       	ldi	r24, 0x30	; 48
 292:	91 50       	subi	r25, 0x01	; 1
 294:	20 40       	sbci	r18, 0x00	; 0
 296:	80 40       	sbci	r24, 0x00	; 0
 298:	e1 f7       	brne	.-8      	; 0x292 <main+0x130>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <main+0x13a>
 29c:	00 00       	nop
	
	a1=100000/(V_100-V_0);
 29e:	a7 01       	movw	r20, r14
 2a0:	96 01       	movw	r18, r12
 2a2:	28 19       	sub	r18, r8
 2a4:	39 09       	sbc	r19, r9
 2a6:	4a 09       	sbc	r20, r10
 2a8:	5b 09       	sbc	r21, r11
 2aa:	60 ea       	ldi	r22, 0xA0	; 160
 2ac:	76 e8       	ldi	r23, 0x86	; 134
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 38 03 	call	0x670	; 0x670 <__divmodsi4>
 2b6:	69 01       	movw	r12, r18
 2b8:	7a 01       	movw	r14, r20
 2ba:	22 2e       	mov	r2, r18
 2bc:	22 96       	adiw	r28, 0x02	; 2
 2be:	df ae       	std	Y+63, r13	; 0x3f
 2c0:	22 97       	sbiw	r28, 0x02	; 2
 2c2:	23 96       	adiw	r28, 0x03	; 3
 2c4:	ef ae       	std	Y+63, r14	; 0x3f
 2c6:	23 97       	sbiw	r28, 0x03	; 3
 2c8:	24 96       	adiw	r28, 0x04	; 4
 2ca:	ff ae       	std	Y+63, r15	; 0x3f
 2cc:	24 97       	sbiw	r28, 0x04	; 4
	sprintf( Text,"\r\n a1 = %ld",a1);
 2ce:	ff 92       	push	r15
 2d0:	ef 92       	push	r14
 2d2:	df 92       	push	r13
 2d4:	2f 93       	push	r18
 2d6:	83 e2       	ldi	r24, 0x23	; 35
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	9f 93       	push	r25
 2dc:	8f 93       	push	r24
 2de:	1f 93       	push	r17
 2e0:	0f 93       	push	r16
 2e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <sprintf>
	uart_puts (Text); _delay_ms(1000);
 2e6:	c8 01       	movw	r24, r16
 2e8:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uart_puts>
 2ec:	9f ef       	ldi	r25, 0xFF	; 255
 2ee:	23 ed       	ldi	r18, 0xD3	; 211
 2f0:	80 e3       	ldi	r24, 0x30	; 48
 2f2:	91 50       	subi	r25, 0x01	; 1
 2f4:	20 40       	sbci	r18, 0x00	; 0
 2f6:	80 40       	sbci	r24, 0x00	; 0
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <main+0x190>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <main+0x19a>
 2fc:	00 00       	nop
	a0=-a1*V_0;
 2fe:	22 27       	eor	r18, r18
 300:	33 27       	eor	r19, r19
 302:	a9 01       	movw	r20, r18
 304:	2c 19       	sub	r18, r12
 306:	3d 09       	sbc	r19, r13
 308:	4e 09       	sbc	r20, r14
 30a:	5f 09       	sbc	r21, r15
 30c:	c5 01       	movw	r24, r10
 30e:	b4 01       	movw	r22, r8
 310:	0e 94 06 03 	call	0x60c	; 0x60c <__mulsi3>
 314:	4b 01       	movw	r8, r22
 316:	5c 01       	movw	r10, r24
	sprintf( Text,"\r\n a0 = %ld",a0);
 318:	bf 92       	push	r11
 31a:	af 92       	push	r10
 31c:	9f 92       	push	r9
 31e:	6f 93       	push	r22
 320:	8f e2       	ldi	r24, 0x2F	; 47
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	9f 93       	push	r25
 326:	8f 93       	push	r24
 328:	1f 93       	push	r17
 32a:	0f 93       	push	r16
 32c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <sprintf>
	uart_puts (Text); _delay_ms(1000);
 330:	c8 01       	movw	r24, r16
 332:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uart_puts>
 336:	9f ef       	ldi	r25, 0xFF	; 255
 338:	23 ed       	ldi	r18, 0xD3	; 211
 33a:	80 e3       	ldi	r24, 0x30	; 48
 33c:	91 50       	subi	r25, 0x01	; 1
 33e:	20 40       	sbci	r18, 0x00	; 0
 340:	80 40       	sbci	r24, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <main+0x1da>
 344:	00 c0       	rjmp	.+0      	; 0x346 <main+0x1e4>
 346:	00 00       	nop
	sprintf( Text,"\r\nPlease dip the sensor in unknown temperature\r\n");
 348:	81 e3       	ldi	r24, 0x31	; 49
 34a:	eb e3       	ldi	r30, 0x3B	; 59
 34c:	f1 e0       	ldi	r31, 0x01	; 1
 34e:	d8 01       	movw	r26, r16
 350:	01 90       	ld	r0, Z+
 352:	0d 92       	st	X+, r0
 354:	8a 95       	dec	r24
 356:	e1 f7       	brne	.-8      	; 0x350 <main+0x1ee>
	uart_puts (Text); _delay_ms(5000);
 358:	c8 01       	movw	r24, r16
 35a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uart_puts>
 35e:	9f ef       	ldi	r25, 0xFF	; 255
 360:	23 e2       	ldi	r18, 0x23	; 35
 362:	84 ef       	ldi	r24, 0xF4	; 244
 364:	91 50       	subi	r25, 0x01	; 1
 366:	20 40       	sbci	r18, 0x00	; 0
 368:	80 40       	sbci	r24, 0x00	; 0
 36a:	e1 f7       	brne	.-8      	; 0x364 <main+0x202>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <main+0x20c>
 36e:	00 00       	nop
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61

	while(1)
    {
	V_U=ReadChannel(6);
	//V_U=(3*Value_U)/1023;
	sprintf( Text,"\r\n V_U = %ld",V_U);
 37a:	0f 2e       	mov	r0, r31
 37c:	fc e6       	ldi	r31, 0x6C	; 108
 37e:	cf 2e       	mov	r12, r31
 380:	f1 e0       	ldi	r31, 0x01	; 1
 382:	df 2e       	mov	r13, r31
 384:	f0 2d       	mov	r31, r0
	uart_puts (Text); _delay_ms(1000);
	
	T_U=a1*V_U+a0;
	sprintf( Text,"\r\n Unknown Temperature T_U = %04ld  degC",T_U/100);
 386:	0f 2e       	mov	r0, r31
 388:	f9 e7       	ldi	r31, 0x79	; 121
 38a:	ef 2e       	mov	r14, r31
 38c:	f1 e0       	ldi	r31, 0x01	; 1
 38e:	ff 2e       	mov	r15, r31
 390:	f0 2d       	mov	r31, r0
	Text[33]=Text[32];
	Text[32]='.';
 392:	0f 2e       	mov	r0, r31
 394:	fe e2       	ldi	r31, 0x2E	; 46
 396:	3f 2e       	mov	r3, r31
 398:	f0 2d       	mov	r31, r0
	
	

	while(1)
    {
	V_U=ReadChannel(6);
 39a:	86 e0       	ldi	r24, 0x06	; 6
 39c:	0e 94 53 00 	call	0xa6	; 0xa6 <ReadChannel>
 3a0:	2c 01       	movw	r4, r24
 3a2:	61 2c       	mov	r6, r1
 3a4:	71 2c       	mov	r7, r1
	//V_U=(3*Value_U)/1023;
	sprintf( Text,"\r\n V_U = %ld",V_U);
 3a6:	1f 92       	push	r1
 3a8:	1f 92       	push	r1
 3aa:	5f 92       	push	r5
 3ac:	8f 93       	push	r24
 3ae:	df 92       	push	r13
 3b0:	cf 92       	push	r12
 3b2:	1f 93       	push	r17
 3b4:	0f 93       	push	r16
 3b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <sprintf>
	uart_puts (Text); _delay_ms(1000);
 3ba:	c8 01       	movw	r24, r16
 3bc:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uart_puts>
 3c0:	9f ef       	ldi	r25, 0xFF	; 255
 3c2:	23 ed       	ldi	r18, 0xD3	; 211
 3c4:	80 e3       	ldi	r24, 0x30	; 48
 3c6:	91 50       	subi	r25, 0x01	; 1
 3c8:	20 40       	sbci	r18, 0x00	; 0
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	e1 f7       	brne	.-8      	; 0x3c6 <main+0x264>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <main+0x26e>
 3d0:	00 00       	nop
	
	T_U=a1*V_U+a0;
	sprintf( Text,"\r\n Unknown Temperature T_U = %04ld  degC",T_U/100);
 3d2:	22 2d       	mov	r18, r2
 3d4:	22 96       	adiw	r28, 0x02	; 2
 3d6:	3f ad       	ldd	r19, Y+63	; 0x3f
 3d8:	22 97       	sbiw	r28, 0x02	; 2
 3da:	23 96       	adiw	r28, 0x03	; 3
 3dc:	4f ad       	ldd	r20, Y+63	; 0x3f
 3de:	23 97       	sbiw	r28, 0x03	; 3
 3e0:	24 96       	adiw	r28, 0x04	; 4
 3e2:	5f ad       	ldd	r21, Y+63	; 0x3f
 3e4:	24 97       	sbiw	r28, 0x04	; 4
 3e6:	c3 01       	movw	r24, r6
 3e8:	b2 01       	movw	r22, r4
 3ea:	0e 94 06 03 	call	0x60c	; 0x60c <__mulsi3>
 3ee:	68 0d       	add	r22, r8
 3f0:	79 1d       	adc	r23, r9
 3f2:	8a 1d       	adc	r24, r10
 3f4:	9b 1d       	adc	r25, r11
 3f6:	24 e6       	ldi	r18, 0x64	; 100
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	40 e0       	ldi	r20, 0x00	; 0
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	0e 94 38 03 	call	0x670	; 0x670 <__divmodsi4>
 402:	5f 93       	push	r21
 404:	4f 93       	push	r20
 406:	3f 93       	push	r19
 408:	2f 93       	push	r18
 40a:	ff 92       	push	r15
 40c:	ef 92       	push	r14
 40e:	1f 93       	push	r17
 410:	0f 93       	push	r16
 412:	0e 94 71 03 	call	0x6e2	; 0x6e2 <sprintf>
	Text[33]=Text[32];
 416:	89 a1       	ldd	r24, Y+33	; 0x21
 418:	8a a3       	std	Y+34, r24	; 0x22
	Text[32]='.';
 41a:	39 a2       	std	Y+33, r3	; 0x21
	uart_puts (Text); _delay_ms(1000);	
 41c:	c8 01       	movw	r24, r16
 41e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uart_puts>
 422:	9f ef       	ldi	r25, 0xFF	; 255
 424:	23 ed       	ldi	r18, 0xD3	; 211
 426:	80 e3       	ldi	r24, 0x30	; 48
 428:	91 50       	subi	r25, 0x01	; 1
 42a:	20 40       	sbci	r18, 0x00	; 0
 42c:	80 40       	sbci	r24, 0x00	; 0
 42e:	e1 f7       	brne	.-8      	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
 432:	00 00       	nop
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	f8 94       	cli
 438:	de bf       	out	0x3e, r29	; 62
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	cd bf       	out	0x3d, r28	; 61
 43e:	ad cf       	rjmp	.-166    	; 0x39a <main+0x238>

00000440 <__vector_10>:

ISR(TIMER0_COMP_vect)
/*
Interrupt service routine for timer 0 interrupt.
*/
{
 440:	1f 92       	push	r1
 442:	0f 92       	push	r0
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	0f 92       	push	r0
 448:	11 24       	eor	r1, r1
 44a:	8f 93       	push	r24
 44c:	9f 93       	push	r25
	intnum++;
 44e:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
 452:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <__data_end+0x1>
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <__data_end+0x1>
 45c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <uart_init>:
Receives single character. This routine waits if 
no character is available. 
*/
{
   return fifo_get_wait(&infifo);
}
 46e:	cf 93       	push	r28
 470:	cf b7       	in	r28, 0x3f	; 63
 472:	dc 01       	movw	r26, r24
 474:	cb 01       	movw	r24, r22
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	aa 1f       	adc	r26, r26
 47c:	bb 1f       	adc	r27, r27
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	aa 1f       	adc	r26, r26
 484:	bb 1f       	adc	r27, r27
 486:	9c 01       	movw	r18, r24
 488:	ad 01       	movw	r20, r26
 48a:	22 0f       	add	r18, r18
 48c:	33 1f       	adc	r19, r19
 48e:	44 1f       	adc	r20, r20
 490:	55 1f       	adc	r21, r21
 492:	22 0f       	add	r18, r18
 494:	33 1f       	adc	r19, r19
 496:	44 1f       	adc	r20, r20
 498:	55 1f       	adc	r21, r21
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	74 e2       	ldi	r23, 0x24	; 36
 49e:	84 ef       	ldi	r24, 0xF4	; 244
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 16 03 	call	0x62c	; 0x62c <__udivmodsi4>
 4a6:	21 50       	subi	r18, 0x01	; 1
 4a8:	31 09       	sbc	r19, r1
 4aa:	29 b9       	out	0x09, r18	; 9
 4ac:	f8 94       	cli
 4ae:	88 e9       	ldi	r24, 0x98	; 152
 4b0:	8a b9       	out	0x0a, r24	; 10
 4b2:	86 e8       	ldi	r24, 0x86	; 134
 4b4:	80 bd       	out	0x20, r24	; 32
 4b6:	8c b1       	in	r24, 0x0c	; 12
 4b8:	5f 99       	sbic	0x0b, 7	; 11
 4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <uart_init+0x48>
 4bc:	80 ec       	ldi	r24, 0xC0	; 192
 4be:	8b b9       	out	0x0b, r24	; 11
 4c0:	cf bf       	out	0x3f, r28	; 63
 4c2:	40 e4       	ldi	r20, 0x40	; 64
 4c4:	66 ea       	ldi	r22, 0xA6	; 166
 4c6:	71 e0       	ldi	r23, 0x01	; 1
 4c8:	8e ee       	ldi	r24, 0xEE	; 238
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	0e 94 6e 00 	call	0xdc	; 0xdc <fifo_init>
 4d0:	40 e4       	ldi	r20, 0x40	; 64
 4d2:	66 ef       	ldi	r22, 0xF6	; 246
 4d4:	71 e0       	ldi	r23, 0x01	; 1
 4d6:	86 ee       	ldi	r24, 0xE6	; 230
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	0e 94 6e 00 	call	0xdc	; 0xdc <fifo_init>
 4de:	86 ee       	ldi	r24, 0xE6	; 230
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <uart_putc>:
 4e6:	68 2f       	mov	r22, r24
 4e8:	86 ee       	ldi	r24, 0xE6	; 230
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	0e 94 78 00 	call	0xf0	; 0xf0 <fifo_put>
 4f0:	55 9a       	sbi	0x0a, 5	; 10
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	08 95       	ret

000004f6 <uart_puts>:
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	ec 01       	movw	r28, r24
 500:	8e 01       	movw	r16, r28
 502:	88 81       	ld	r24, Y
 504:	88 23       	and	r24, r24
 506:	39 f0       	breq	.+14     	; 0x516 <uart_puts+0x20>
 508:	0e 94 73 02 	call	0x4e6	; 0x4e6 <uart_putc>
 50c:	21 96       	adiw	r28, 0x01	; 1
 50e:	f8 01       	movw	r30, r16
 510:	80 81       	ld	r24, Z
 512:	81 11       	cpse	r24, r1
 514:	f5 cf       	rjmp	.-22     	; 0x500 <uart_puts+0xa>
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	1f 91       	pop	r17
 51c:	0f 91       	pop	r16
 51e:	08 95       	ret

00000520 <__vector_13>:

SIGNAL(USART_RXC_vect)	// received characters will be stored in input FIFO
{
 520:	1f 92       	push	r1
 522:	0f 92       	push	r0
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	0f 92       	push	r0
 528:	11 24       	eor	r1, r1
 52a:	2f 93       	push	r18
 52c:	3f 93       	push	r19
 52e:	4f 93       	push	r20
 530:	8f 93       	push	r24
 532:	9f 93       	push	r25
 534:	af 93       	push	r26
 536:	bf 93       	push	r27
 538:	ef 93       	push	r30
 53a:	ff 93       	push	r31
   _inline_fifo_put(&infifo, UDR);
 53c:	4c b1       	in	r20, 0x0c	; 12
_inline_fifo_put (fifo_t *f, const uint8_t data)
/*
Put single character inti FIFO.
*/
{
	if (f->count >= f->size)
 53e:	ee ee       	ldi	r30, 0xEE	; 238
 540:	f1 e0       	ldi	r31, 0x01	; 1
 542:	90 81       	ld	r25, Z
 544:	81 81       	ldd	r24, Z+1	; 0x01
 546:	98 17       	cp	r25, r24
 548:	c0 f4       	brcc	.+48     	; 0x57a <__vector_13+0x5a>
		return 0;
		
	uint8_t * pwrite = f->pwrite;
 54a:	a4 81       	ldd	r26, Z+4	; 0x04
 54c:	b5 81       	ldd	r27, Z+5	; 0x05
	
	*(pwrite++) = data;
 54e:	9d 01       	movw	r18, r26
 550:	2f 5f       	subi	r18, 0xFF	; 255
 552:	3f 4f       	sbci	r19, 0xFF	; 255
 554:	4c 93       	st	X, r20
	
	uint8_t write2end = f->write2end;
 556:	87 81       	ldd	r24, Z+7	; 0x07
	
	if (--write2end == 0)
 558:	81 50       	subi	r24, 0x01	; 1
 55a:	21 f4       	brne	.+8      	; 0x564 <__vector_13+0x44>
	{
		write2end = f->size;
 55c:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <infifo+0x1>
		pwrite -= write2end;
 560:	28 1b       	sub	r18, r24
 562:	31 09       	sbc	r19, r1
	}
	
	f->write2end = write2end;
 564:	ee ee       	ldi	r30, 0xEE	; 238
 566:	f1 e0       	ldi	r31, 0x01	; 1
 568:	87 83       	std	Z+7, r24	; 0x07
	f->pwrite = pwrite;
 56a:	35 83       	std	Z+5, r19	; 0x05
 56c:	24 83       	std	Z+4, r18	; 0x04

	uint8_t sreg = SREG;
 56e:	9f b7       	in	r25, 0x3f	; 63
	cli();
 570:	f8 94       	cli
	f->count++;
 572:	80 81       	ld	r24, Z
 574:	8f 5f       	subi	r24, 0xFF	; 255
 576:	80 83       	st	Z, r24
	SREG = sreg;
 578:	9f bf       	out	0x3f, r25	; 63
}
 57a:	ff 91       	pop	r31
 57c:	ef 91       	pop	r30
 57e:	bf 91       	pop	r27
 580:	af 91       	pop	r26
 582:	9f 91       	pop	r25
 584:	8f 91       	pop	r24
 586:	4f 91       	pop	r20
 588:	3f 91       	pop	r19
 58a:	2f 91       	pop	r18
 58c:	0f 90       	pop	r0
 58e:	0f be       	out	0x3f, r0	; 63
 590:	0f 90       	pop	r0
 592:	1f 90       	pop	r1
 594:	18 95       	reti

00000596 <__vector_14>:

SIGNAL(USART_UDRE_vect)	// characters from the output FIFO will be send
{						// until buffer is empty. 
 596:	1f 92       	push	r1
 598:	0f 92       	push	r0
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	0f 92       	push	r0
 59e:	11 24       	eor	r1, r1
 5a0:	2f 93       	push	r18
 5a2:	3f 93       	push	r19
 5a4:	8f 93       	push	r24
 5a6:	9f 93       	push	r25
 5a8:	af 93       	push	r26
 5aa:	bf 93       	push	r27
 5ac:	ef 93       	push	r30
 5ae:	ff 93       	push	r31
   if (outfifo.count > 0)
 5b0:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <outfifo>
 5b4:	88 23       	and	r24, r24
 5b6:	e1 f0       	breq	.+56     	; 0x5f0 <__vector_14+0x5a>
_inline_fifo_get (fifo_t *f)
/*
Gets single character from FIFO.
*/
{
	uint8_t *pread = f->pread;
 5b8:	e6 ee       	ldi	r30, 0xE6	; 230
 5ba:	f1 e0       	ldi	r31, 0x01	; 1
 5bc:	a2 81       	ldd	r26, Z+2	; 0x02
 5be:	b3 81       	ldd	r27, Z+3	; 0x03
	uint8_t data = *(pread++);
 5c0:	9d 01       	movw	r18, r26
 5c2:	2f 5f       	subi	r18, 0xFF	; 255
 5c4:	3f 4f       	sbci	r19, 0xFF	; 255
 5c6:	9c 91       	ld	r25, X
	uint8_t read2end = f->read2end;
 5c8:	86 81       	ldd	r24, Z+6	; 0x06
	
	if (--read2end == 0)
 5ca:	81 50       	subi	r24, 0x01	; 1
 5cc:	21 f4       	brne	.+8      	; 0x5d6 <__vector_14+0x40>
	{
		read2end = f->size;
 5ce:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <outfifo+0x1>
		pread -= read2end;
 5d2:	28 1b       	sub	r18, r24
 5d4:	31 09       	sbc	r19, r1
	}
	
	f->pread = pread;
 5d6:	e6 ee       	ldi	r30, 0xE6	; 230
 5d8:	f1 e0       	ldi	r31, 0x01	; 1
 5da:	33 83       	std	Z+3, r19	; 0x03
 5dc:	22 83       	std	Z+2, r18	; 0x02
	f->read2end = read2end;
 5de:	86 83       	std	Z+6, r24	; 0x06
	
	uint8_t sreg = SREG;
 5e0:	2f b7       	in	r18, 0x3f	; 63
	cli();
 5e2:	f8 94       	cli
	f->count--;
 5e4:	80 81       	ld	r24, Z
 5e6:	81 50       	subi	r24, 0x01	; 1
 5e8:	80 83       	st	Z, r24
	SREG = sreg;
 5ea:	2f bf       	out	0x3f, r18	; 63
      UDR = _inline_fifo_get(&outfifo);
 5ec:	9c b9       	out	0x0c, r25	; 12
 5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <__vector_14+0x5c>
   else
      UCSRB &= ~(1<<UDRIE); // disable interrupt
 5f0:	55 98       	cbi	0x0a, 5	; 10
} 
 5f2:	ff 91       	pop	r31
 5f4:	ef 91       	pop	r30
 5f6:	bf 91       	pop	r27
 5f8:	af 91       	pop	r26
 5fa:	9f 91       	pop	r25
 5fc:	8f 91       	pop	r24
 5fe:	3f 91       	pop	r19
 600:	2f 91       	pop	r18
 602:	0f 90       	pop	r0
 604:	0f be       	out	0x3f, r0	; 63
 606:	0f 90       	pop	r0
 608:	1f 90       	pop	r1
 60a:	18 95       	reti

0000060c <__mulsi3>:
 60c:	db 01       	movw	r26, r22
 60e:	8f 93       	push	r24
 610:	9f 93       	push	r25
 612:	0e 94 57 03 	call	0x6ae	; 0x6ae <__muluhisi3>
 616:	bf 91       	pop	r27
 618:	af 91       	pop	r26
 61a:	a2 9f       	mul	r26, r18
 61c:	80 0d       	add	r24, r0
 61e:	91 1d       	adc	r25, r1
 620:	a3 9f       	mul	r26, r19
 622:	90 0d       	add	r25, r0
 624:	b2 9f       	mul	r27, r18
 626:	90 0d       	add	r25, r0
 628:	11 24       	eor	r1, r1
 62a:	08 95       	ret

0000062c <__udivmodsi4>:
 62c:	a1 e2       	ldi	r26, 0x21	; 33
 62e:	1a 2e       	mov	r1, r26
 630:	aa 1b       	sub	r26, r26
 632:	bb 1b       	sub	r27, r27
 634:	fd 01       	movw	r30, r26
 636:	0d c0       	rjmp	.+26     	; 0x652 <__udivmodsi4_ep>

00000638 <__udivmodsi4_loop>:
 638:	aa 1f       	adc	r26, r26
 63a:	bb 1f       	adc	r27, r27
 63c:	ee 1f       	adc	r30, r30
 63e:	ff 1f       	adc	r31, r31
 640:	a2 17       	cp	r26, r18
 642:	b3 07       	cpc	r27, r19
 644:	e4 07       	cpc	r30, r20
 646:	f5 07       	cpc	r31, r21
 648:	20 f0       	brcs	.+8      	; 0x652 <__udivmodsi4_ep>
 64a:	a2 1b       	sub	r26, r18
 64c:	b3 0b       	sbc	r27, r19
 64e:	e4 0b       	sbc	r30, r20
 650:	f5 0b       	sbc	r31, r21

00000652 <__udivmodsi4_ep>:
 652:	66 1f       	adc	r22, r22
 654:	77 1f       	adc	r23, r23
 656:	88 1f       	adc	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	1a 94       	dec	r1
 65c:	69 f7       	brne	.-38     	; 0x638 <__udivmodsi4_loop>
 65e:	60 95       	com	r22
 660:	70 95       	com	r23
 662:	80 95       	com	r24
 664:	90 95       	com	r25
 666:	9b 01       	movw	r18, r22
 668:	ac 01       	movw	r20, r24
 66a:	bd 01       	movw	r22, r26
 66c:	cf 01       	movw	r24, r30
 66e:	08 95       	ret

00000670 <__divmodsi4>:
 670:	05 2e       	mov	r0, r21
 672:	97 fb       	bst	r25, 7
 674:	1e f4       	brtc	.+6      	; 0x67c <__divmodsi4+0xc>
 676:	00 94       	com	r0
 678:	0e 94 4f 03 	call	0x69e	; 0x69e <__negsi2>
 67c:	57 fd       	sbrc	r21, 7
 67e:	07 d0       	rcall	.+14     	; 0x68e <__divmodsi4_neg2>
 680:	0e 94 16 03 	call	0x62c	; 0x62c <__udivmodsi4>
 684:	07 fc       	sbrc	r0, 7
 686:	03 d0       	rcall	.+6      	; 0x68e <__divmodsi4_neg2>
 688:	4e f4       	brtc	.+18     	; 0x69c <__divmodsi4_exit>
 68a:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__negsi2>

0000068e <__divmodsi4_neg2>:
 68e:	50 95       	com	r21
 690:	40 95       	com	r20
 692:	30 95       	com	r19
 694:	21 95       	neg	r18
 696:	3f 4f       	sbci	r19, 0xFF	; 255
 698:	4f 4f       	sbci	r20, 0xFF	; 255
 69a:	5f 4f       	sbci	r21, 0xFF	; 255

0000069c <__divmodsi4_exit>:
 69c:	08 95       	ret

0000069e <__negsi2>:
 69e:	90 95       	com	r25
 6a0:	80 95       	com	r24
 6a2:	70 95       	com	r23
 6a4:	61 95       	neg	r22
 6a6:	7f 4f       	sbci	r23, 0xFF	; 255
 6a8:	8f 4f       	sbci	r24, 0xFF	; 255
 6aa:	9f 4f       	sbci	r25, 0xFF	; 255
 6ac:	08 95       	ret

000006ae <__muluhisi3>:
 6ae:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__umulhisi3>
 6b2:	a5 9f       	mul	r26, r21
 6b4:	90 0d       	add	r25, r0
 6b6:	b4 9f       	mul	r27, r20
 6b8:	90 0d       	add	r25, r0
 6ba:	a4 9f       	mul	r26, r20
 6bc:	80 0d       	add	r24, r0
 6be:	91 1d       	adc	r25, r1
 6c0:	11 24       	eor	r1, r1
 6c2:	08 95       	ret

000006c4 <__umulhisi3>:
 6c4:	a2 9f       	mul	r26, r18
 6c6:	b0 01       	movw	r22, r0
 6c8:	b3 9f       	mul	r27, r19
 6ca:	c0 01       	movw	r24, r0
 6cc:	a3 9f       	mul	r26, r19
 6ce:	70 0d       	add	r23, r0
 6d0:	81 1d       	adc	r24, r1
 6d2:	11 24       	eor	r1, r1
 6d4:	91 1d       	adc	r25, r1
 6d6:	b2 9f       	mul	r27, r18
 6d8:	70 0d       	add	r23, r0
 6da:	81 1d       	adc	r24, r1
 6dc:	11 24       	eor	r1, r1
 6de:	91 1d       	adc	r25, r1
 6e0:	08 95       	ret

000006e2 <sprintf>:
 6e2:	ae e0       	ldi	r26, 0x0E	; 14
 6e4:	b0 e0       	ldi	r27, 0x00	; 0
 6e6:	e7 e7       	ldi	r30, 0x77	; 119
 6e8:	f3 e0       	ldi	r31, 0x03	; 3
 6ea:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__prologue_saves__+0x1c>
 6ee:	0d 89       	ldd	r16, Y+21	; 0x15
 6f0:	1e 89       	ldd	r17, Y+22	; 0x16
 6f2:	86 e0       	ldi	r24, 0x06	; 6
 6f4:	8c 83       	std	Y+4, r24	; 0x04
 6f6:	1a 83       	std	Y+2, r17	; 0x02
 6f8:	09 83       	std	Y+1, r16	; 0x01
 6fa:	8f ef       	ldi	r24, 0xFF	; 255
 6fc:	9f e7       	ldi	r25, 0x7F	; 127
 6fe:	9e 83       	std	Y+6, r25	; 0x06
 700:	8d 83       	std	Y+5, r24	; 0x05
 702:	ae 01       	movw	r20, r28
 704:	47 5e       	subi	r20, 0xE7	; 231
 706:	5f 4f       	sbci	r21, 0xFF	; 255
 708:	6f 89       	ldd	r22, Y+23	; 0x17
 70a:	78 8d       	ldd	r23, Y+24	; 0x18
 70c:	ce 01       	movw	r24, r28
 70e:	01 96       	adiw	r24, 0x01	; 1
 710:	0e 94 93 03 	call	0x726	; 0x726 <vfprintf>
 714:	ef 81       	ldd	r30, Y+7	; 0x07
 716:	f8 85       	ldd	r31, Y+8	; 0x08
 718:	e0 0f       	add	r30, r16
 71a:	f1 1f       	adc	r31, r17
 71c:	10 82       	st	Z, r1
 71e:	2e 96       	adiw	r28, 0x0e	; 14
 720:	e4 e0       	ldi	r30, 0x04	; 4
 722:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <__epilogue_restores__+0x1c>

00000726 <vfprintf>:
 726:	ab e0       	ldi	r26, 0x0B	; 11
 728:	b0 e0       	ldi	r27, 0x00	; 0
 72a:	e9 e9       	ldi	r30, 0x99	; 153
 72c:	f3 e0       	ldi	r31, 0x03	; 3
 72e:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__prologue_saves__>
 732:	6c 01       	movw	r12, r24
 734:	7b 01       	movw	r14, r22
 736:	8a 01       	movw	r16, r20
 738:	fc 01       	movw	r30, r24
 73a:	17 82       	std	Z+7, r1	; 0x07
 73c:	16 82       	std	Z+6, r1	; 0x06
 73e:	83 81       	ldd	r24, Z+3	; 0x03
 740:	81 ff       	sbrs	r24, 1
 742:	cc c1       	rjmp	.+920    	; 0xadc <__stack+0x27d>
 744:	ce 01       	movw	r24, r28
 746:	01 96       	adiw	r24, 0x01	; 1
 748:	3c 01       	movw	r6, r24
 74a:	f6 01       	movw	r30, r12
 74c:	93 81       	ldd	r25, Z+3	; 0x03
 74e:	f7 01       	movw	r30, r14
 750:	93 fd       	sbrc	r25, 3
 752:	85 91       	lpm	r24, Z+
 754:	93 ff       	sbrs	r25, 3
 756:	81 91       	ld	r24, Z+
 758:	7f 01       	movw	r14, r30
 75a:	88 23       	and	r24, r24
 75c:	09 f4       	brne	.+2      	; 0x760 <vfprintf+0x3a>
 75e:	ba c1       	rjmp	.+884    	; 0xad4 <__stack+0x275>
 760:	85 32       	cpi	r24, 0x25	; 37
 762:	39 f4       	brne	.+14     	; 0x772 <vfprintf+0x4c>
 764:	93 fd       	sbrc	r25, 3
 766:	85 91       	lpm	r24, Z+
 768:	93 ff       	sbrs	r25, 3
 76a:	81 91       	ld	r24, Z+
 76c:	7f 01       	movw	r14, r30
 76e:	85 32       	cpi	r24, 0x25	; 37
 770:	29 f4       	brne	.+10     	; 0x77c <vfprintf+0x56>
 772:	b6 01       	movw	r22, r12
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	0e 94 8a 05 	call	0xb14	; 0xb14 <fputc>
 77a:	e7 cf       	rjmp	.-50     	; 0x74a <vfprintf+0x24>
 77c:	91 2c       	mov	r9, r1
 77e:	21 2c       	mov	r2, r1
 780:	31 2c       	mov	r3, r1
 782:	ff e1       	ldi	r31, 0x1F	; 31
 784:	f3 15       	cp	r31, r3
 786:	d8 f0       	brcs	.+54     	; 0x7be <vfprintf+0x98>
 788:	8b 32       	cpi	r24, 0x2B	; 43
 78a:	79 f0       	breq	.+30     	; 0x7aa <vfprintf+0x84>
 78c:	38 f4       	brcc	.+14     	; 0x79c <vfprintf+0x76>
 78e:	80 32       	cpi	r24, 0x20	; 32
 790:	79 f0       	breq	.+30     	; 0x7b0 <vfprintf+0x8a>
 792:	83 32       	cpi	r24, 0x23	; 35
 794:	a1 f4       	brne	.+40     	; 0x7be <vfprintf+0x98>
 796:	23 2d       	mov	r18, r3
 798:	20 61       	ori	r18, 0x10	; 16
 79a:	1d c0       	rjmp	.+58     	; 0x7d6 <vfprintf+0xb0>
 79c:	8d 32       	cpi	r24, 0x2D	; 45
 79e:	61 f0       	breq	.+24     	; 0x7b8 <vfprintf+0x92>
 7a0:	80 33       	cpi	r24, 0x30	; 48
 7a2:	69 f4       	brne	.+26     	; 0x7be <vfprintf+0x98>
 7a4:	23 2d       	mov	r18, r3
 7a6:	21 60       	ori	r18, 0x01	; 1
 7a8:	16 c0       	rjmp	.+44     	; 0x7d6 <vfprintf+0xb0>
 7aa:	83 2d       	mov	r24, r3
 7ac:	82 60       	ori	r24, 0x02	; 2
 7ae:	38 2e       	mov	r3, r24
 7b0:	e3 2d       	mov	r30, r3
 7b2:	e4 60       	ori	r30, 0x04	; 4
 7b4:	3e 2e       	mov	r3, r30
 7b6:	2a c0       	rjmp	.+84     	; 0x80c <vfprintf+0xe6>
 7b8:	f3 2d       	mov	r31, r3
 7ba:	f8 60       	ori	r31, 0x08	; 8
 7bc:	1d c0       	rjmp	.+58     	; 0x7f8 <vfprintf+0xd2>
 7be:	37 fc       	sbrc	r3, 7
 7c0:	2d c0       	rjmp	.+90     	; 0x81c <vfprintf+0xf6>
 7c2:	20 ed       	ldi	r18, 0xD0	; 208
 7c4:	28 0f       	add	r18, r24
 7c6:	2a 30       	cpi	r18, 0x0A	; 10
 7c8:	40 f0       	brcs	.+16     	; 0x7da <vfprintf+0xb4>
 7ca:	8e 32       	cpi	r24, 0x2E	; 46
 7cc:	b9 f4       	brne	.+46     	; 0x7fc <vfprintf+0xd6>
 7ce:	36 fc       	sbrc	r3, 6
 7d0:	81 c1       	rjmp	.+770    	; 0xad4 <__stack+0x275>
 7d2:	23 2d       	mov	r18, r3
 7d4:	20 64       	ori	r18, 0x40	; 64
 7d6:	32 2e       	mov	r3, r18
 7d8:	19 c0       	rjmp	.+50     	; 0x80c <vfprintf+0xe6>
 7da:	36 fe       	sbrs	r3, 6
 7dc:	06 c0       	rjmp	.+12     	; 0x7ea <vfprintf+0xc4>
 7de:	8a e0       	ldi	r24, 0x0A	; 10
 7e0:	98 9e       	mul	r9, r24
 7e2:	20 0d       	add	r18, r0
 7e4:	11 24       	eor	r1, r1
 7e6:	92 2e       	mov	r9, r18
 7e8:	11 c0       	rjmp	.+34     	; 0x80c <vfprintf+0xe6>
 7ea:	ea e0       	ldi	r30, 0x0A	; 10
 7ec:	2e 9e       	mul	r2, r30
 7ee:	20 0d       	add	r18, r0
 7f0:	11 24       	eor	r1, r1
 7f2:	22 2e       	mov	r2, r18
 7f4:	f3 2d       	mov	r31, r3
 7f6:	f0 62       	ori	r31, 0x20	; 32
 7f8:	3f 2e       	mov	r3, r31
 7fa:	08 c0       	rjmp	.+16     	; 0x80c <vfprintf+0xe6>
 7fc:	8c 36       	cpi	r24, 0x6C	; 108
 7fe:	21 f4       	brne	.+8      	; 0x808 <vfprintf+0xe2>
 800:	83 2d       	mov	r24, r3
 802:	80 68       	ori	r24, 0x80	; 128
 804:	38 2e       	mov	r3, r24
 806:	02 c0       	rjmp	.+4      	; 0x80c <vfprintf+0xe6>
 808:	88 36       	cpi	r24, 0x68	; 104
 80a:	41 f4       	brne	.+16     	; 0x81c <vfprintf+0xf6>
 80c:	f7 01       	movw	r30, r14
 80e:	93 fd       	sbrc	r25, 3
 810:	85 91       	lpm	r24, Z+
 812:	93 ff       	sbrs	r25, 3
 814:	81 91       	ld	r24, Z+
 816:	7f 01       	movw	r14, r30
 818:	81 11       	cpse	r24, r1
 81a:	b3 cf       	rjmp	.-154    	; 0x782 <vfprintf+0x5c>
 81c:	98 2f       	mov	r25, r24
 81e:	9f 7d       	andi	r25, 0xDF	; 223
 820:	95 54       	subi	r25, 0x45	; 69
 822:	93 30       	cpi	r25, 0x03	; 3
 824:	28 f4       	brcc	.+10     	; 0x830 <vfprintf+0x10a>
 826:	0c 5f       	subi	r16, 0xFC	; 252
 828:	1f 4f       	sbci	r17, 0xFF	; 255
 82a:	9f e3       	ldi	r25, 0x3F	; 63
 82c:	99 83       	std	Y+1, r25	; 0x01
 82e:	0d c0       	rjmp	.+26     	; 0x84a <vfprintf+0x124>
 830:	83 36       	cpi	r24, 0x63	; 99
 832:	31 f0       	breq	.+12     	; 0x840 <vfprintf+0x11a>
 834:	83 37       	cpi	r24, 0x73	; 115
 836:	71 f0       	breq	.+28     	; 0x854 <vfprintf+0x12e>
 838:	83 35       	cpi	r24, 0x53	; 83
 83a:	09 f0       	breq	.+2      	; 0x83e <vfprintf+0x118>
 83c:	59 c0       	rjmp	.+178    	; 0x8f0 <__stack+0x91>
 83e:	21 c0       	rjmp	.+66     	; 0x882 <__stack+0x23>
 840:	f8 01       	movw	r30, r16
 842:	80 81       	ld	r24, Z
 844:	89 83       	std	Y+1, r24	; 0x01
 846:	0e 5f       	subi	r16, 0xFE	; 254
 848:	1f 4f       	sbci	r17, 0xFF	; 255
 84a:	88 24       	eor	r8, r8
 84c:	83 94       	inc	r8
 84e:	91 2c       	mov	r9, r1
 850:	53 01       	movw	r10, r6
 852:	13 c0       	rjmp	.+38     	; 0x87a <__stack+0x1b>
 854:	28 01       	movw	r4, r16
 856:	f2 e0       	ldi	r31, 0x02	; 2
 858:	4f 0e       	add	r4, r31
 85a:	51 1c       	adc	r5, r1
 85c:	f8 01       	movw	r30, r16
 85e:	a0 80       	ld	r10, Z
 860:	b1 80       	ldd	r11, Z+1	; 0x01
 862:	36 fe       	sbrs	r3, 6
 864:	03 c0       	rjmp	.+6      	; 0x86c <__stack+0xd>
 866:	69 2d       	mov	r22, r9
 868:	70 e0       	ldi	r23, 0x00	; 0
 86a:	02 c0       	rjmp	.+4      	; 0x870 <__stack+0x11>
 86c:	6f ef       	ldi	r22, 0xFF	; 255
 86e:	7f ef       	ldi	r23, 0xFF	; 255
 870:	c5 01       	movw	r24, r10
 872:	0e 94 7f 05 	call	0xafe	; 0xafe <strnlen>
 876:	4c 01       	movw	r8, r24
 878:	82 01       	movw	r16, r4
 87a:	f3 2d       	mov	r31, r3
 87c:	ff 77       	andi	r31, 0x7F	; 127
 87e:	3f 2e       	mov	r3, r31
 880:	16 c0       	rjmp	.+44     	; 0x8ae <__stack+0x4f>
 882:	28 01       	movw	r4, r16
 884:	22 e0       	ldi	r18, 0x02	; 2
 886:	42 0e       	add	r4, r18
 888:	51 1c       	adc	r5, r1
 88a:	f8 01       	movw	r30, r16
 88c:	a0 80       	ld	r10, Z
 88e:	b1 80       	ldd	r11, Z+1	; 0x01
 890:	36 fe       	sbrs	r3, 6
 892:	03 c0       	rjmp	.+6      	; 0x89a <__stack+0x3b>
 894:	69 2d       	mov	r22, r9
 896:	70 e0       	ldi	r23, 0x00	; 0
 898:	02 c0       	rjmp	.+4      	; 0x89e <__stack+0x3f>
 89a:	6f ef       	ldi	r22, 0xFF	; 255
 89c:	7f ef       	ldi	r23, 0xFF	; 255
 89e:	c5 01       	movw	r24, r10
 8a0:	0e 94 74 05 	call	0xae8	; 0xae8 <strnlen_P>
 8a4:	4c 01       	movw	r8, r24
 8a6:	f3 2d       	mov	r31, r3
 8a8:	f0 68       	ori	r31, 0x80	; 128
 8aa:	3f 2e       	mov	r3, r31
 8ac:	82 01       	movw	r16, r4
 8ae:	33 fc       	sbrc	r3, 3
 8b0:	1b c0       	rjmp	.+54     	; 0x8e8 <__stack+0x89>
 8b2:	82 2d       	mov	r24, r2
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	88 16       	cp	r8, r24
 8b8:	99 06       	cpc	r9, r25
 8ba:	b0 f4       	brcc	.+44     	; 0x8e8 <__stack+0x89>
 8bc:	b6 01       	movw	r22, r12
 8be:	80 e2       	ldi	r24, 0x20	; 32
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	0e 94 8a 05 	call	0xb14	; 0xb14 <fputc>
 8c6:	2a 94       	dec	r2
 8c8:	f4 cf       	rjmp	.-24     	; 0x8b2 <__stack+0x53>
 8ca:	f5 01       	movw	r30, r10
 8cc:	37 fc       	sbrc	r3, 7
 8ce:	85 91       	lpm	r24, Z+
 8d0:	37 fe       	sbrs	r3, 7
 8d2:	81 91       	ld	r24, Z+
 8d4:	5f 01       	movw	r10, r30
 8d6:	b6 01       	movw	r22, r12
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	0e 94 8a 05 	call	0xb14	; 0xb14 <fputc>
 8de:	21 10       	cpse	r2, r1
 8e0:	2a 94       	dec	r2
 8e2:	21 e0       	ldi	r18, 0x01	; 1
 8e4:	82 1a       	sub	r8, r18
 8e6:	91 08       	sbc	r9, r1
 8e8:	81 14       	cp	r8, r1
 8ea:	91 04       	cpc	r9, r1
 8ec:	71 f7       	brne	.-36     	; 0x8ca <__stack+0x6b>
 8ee:	e8 c0       	rjmp	.+464    	; 0xac0 <__stack+0x261>
 8f0:	84 36       	cpi	r24, 0x64	; 100
 8f2:	11 f0       	breq	.+4      	; 0x8f8 <__stack+0x99>
 8f4:	89 36       	cpi	r24, 0x69	; 105
 8f6:	41 f5       	brne	.+80     	; 0x948 <__stack+0xe9>
 8f8:	f8 01       	movw	r30, r16
 8fa:	37 fe       	sbrs	r3, 7
 8fc:	07 c0       	rjmp	.+14     	; 0x90c <__stack+0xad>
 8fe:	60 81       	ld	r22, Z
 900:	71 81       	ldd	r23, Z+1	; 0x01
 902:	82 81       	ldd	r24, Z+2	; 0x02
 904:	93 81       	ldd	r25, Z+3	; 0x03
 906:	0c 5f       	subi	r16, 0xFC	; 252
 908:	1f 4f       	sbci	r17, 0xFF	; 255
 90a:	08 c0       	rjmp	.+16     	; 0x91c <__stack+0xbd>
 90c:	60 81       	ld	r22, Z
 90e:	71 81       	ldd	r23, Z+1	; 0x01
 910:	07 2e       	mov	r0, r23
 912:	00 0c       	add	r0, r0
 914:	88 0b       	sbc	r24, r24
 916:	99 0b       	sbc	r25, r25
 918:	0e 5f       	subi	r16, 0xFE	; 254
 91a:	1f 4f       	sbci	r17, 0xFF	; 255
 91c:	f3 2d       	mov	r31, r3
 91e:	ff 76       	andi	r31, 0x6F	; 111
 920:	3f 2e       	mov	r3, r31
 922:	97 ff       	sbrs	r25, 7
 924:	09 c0       	rjmp	.+18     	; 0x938 <__stack+0xd9>
 926:	90 95       	com	r25
 928:	80 95       	com	r24
 92a:	70 95       	com	r23
 92c:	61 95       	neg	r22
 92e:	7f 4f       	sbci	r23, 0xFF	; 255
 930:	8f 4f       	sbci	r24, 0xFF	; 255
 932:	9f 4f       	sbci	r25, 0xFF	; 255
 934:	f0 68       	ori	r31, 0x80	; 128
 936:	3f 2e       	mov	r3, r31
 938:	2a e0       	ldi	r18, 0x0A	; 10
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	a3 01       	movw	r20, r6
 93e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__ultoa_invert>
 942:	88 2e       	mov	r8, r24
 944:	86 18       	sub	r8, r6
 946:	45 c0       	rjmp	.+138    	; 0x9d2 <__stack+0x173>
 948:	85 37       	cpi	r24, 0x75	; 117
 94a:	31 f4       	brne	.+12     	; 0x958 <__stack+0xf9>
 94c:	23 2d       	mov	r18, r3
 94e:	2f 7e       	andi	r18, 0xEF	; 239
 950:	b2 2e       	mov	r11, r18
 952:	2a e0       	ldi	r18, 0x0A	; 10
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	25 c0       	rjmp	.+74     	; 0x9a2 <__stack+0x143>
 958:	93 2d       	mov	r25, r3
 95a:	99 7f       	andi	r25, 0xF9	; 249
 95c:	b9 2e       	mov	r11, r25
 95e:	8f 36       	cpi	r24, 0x6F	; 111
 960:	c1 f0       	breq	.+48     	; 0x992 <__stack+0x133>
 962:	18 f4       	brcc	.+6      	; 0x96a <__stack+0x10b>
 964:	88 35       	cpi	r24, 0x58	; 88
 966:	79 f0       	breq	.+30     	; 0x986 <__stack+0x127>
 968:	b5 c0       	rjmp	.+362    	; 0xad4 <__stack+0x275>
 96a:	80 37       	cpi	r24, 0x70	; 112
 96c:	19 f0       	breq	.+6      	; 0x974 <__stack+0x115>
 96e:	88 37       	cpi	r24, 0x78	; 120
 970:	21 f0       	breq	.+8      	; 0x97a <__stack+0x11b>
 972:	b0 c0       	rjmp	.+352    	; 0xad4 <__stack+0x275>
 974:	e9 2f       	mov	r30, r25
 976:	e0 61       	ori	r30, 0x10	; 16
 978:	be 2e       	mov	r11, r30
 97a:	b4 fe       	sbrs	r11, 4
 97c:	0d c0       	rjmp	.+26     	; 0x998 <__stack+0x139>
 97e:	fb 2d       	mov	r31, r11
 980:	f4 60       	ori	r31, 0x04	; 4
 982:	bf 2e       	mov	r11, r31
 984:	09 c0       	rjmp	.+18     	; 0x998 <__stack+0x139>
 986:	34 fe       	sbrs	r3, 4
 988:	0a c0       	rjmp	.+20     	; 0x99e <__stack+0x13f>
 98a:	29 2f       	mov	r18, r25
 98c:	26 60       	ori	r18, 0x06	; 6
 98e:	b2 2e       	mov	r11, r18
 990:	06 c0       	rjmp	.+12     	; 0x99e <__stack+0x13f>
 992:	28 e0       	ldi	r18, 0x08	; 8
 994:	30 e0       	ldi	r19, 0x00	; 0
 996:	05 c0       	rjmp	.+10     	; 0x9a2 <__stack+0x143>
 998:	20 e1       	ldi	r18, 0x10	; 16
 99a:	30 e0       	ldi	r19, 0x00	; 0
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <__stack+0x143>
 99e:	20 e1       	ldi	r18, 0x10	; 16
 9a0:	32 e0       	ldi	r19, 0x02	; 2
 9a2:	f8 01       	movw	r30, r16
 9a4:	b7 fe       	sbrs	r11, 7
 9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <__stack+0x157>
 9a8:	60 81       	ld	r22, Z
 9aa:	71 81       	ldd	r23, Z+1	; 0x01
 9ac:	82 81       	ldd	r24, Z+2	; 0x02
 9ae:	93 81       	ldd	r25, Z+3	; 0x03
 9b0:	0c 5f       	subi	r16, 0xFC	; 252
 9b2:	1f 4f       	sbci	r17, 0xFF	; 255
 9b4:	06 c0       	rjmp	.+12     	; 0x9c2 <__stack+0x163>
 9b6:	60 81       	ld	r22, Z
 9b8:	71 81       	ldd	r23, Z+1	; 0x01
 9ba:	80 e0       	ldi	r24, 0x00	; 0
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	0e 5f       	subi	r16, 0xFE	; 254
 9c0:	1f 4f       	sbci	r17, 0xFF	; 255
 9c2:	a3 01       	movw	r20, r6
 9c4:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__ultoa_invert>
 9c8:	88 2e       	mov	r8, r24
 9ca:	86 18       	sub	r8, r6
 9cc:	fb 2d       	mov	r31, r11
 9ce:	ff 77       	andi	r31, 0x7F	; 127
 9d0:	3f 2e       	mov	r3, r31
 9d2:	36 fe       	sbrs	r3, 6
 9d4:	0d c0       	rjmp	.+26     	; 0x9f0 <__stack+0x191>
 9d6:	23 2d       	mov	r18, r3
 9d8:	2e 7f       	andi	r18, 0xFE	; 254
 9da:	a2 2e       	mov	r10, r18
 9dc:	89 14       	cp	r8, r9
 9de:	58 f4       	brcc	.+22     	; 0x9f6 <__stack+0x197>
 9e0:	34 fe       	sbrs	r3, 4
 9e2:	0b c0       	rjmp	.+22     	; 0x9fa <__stack+0x19b>
 9e4:	32 fc       	sbrc	r3, 2
 9e6:	09 c0       	rjmp	.+18     	; 0x9fa <__stack+0x19b>
 9e8:	83 2d       	mov	r24, r3
 9ea:	8e 7e       	andi	r24, 0xEE	; 238
 9ec:	a8 2e       	mov	r10, r24
 9ee:	05 c0       	rjmp	.+10     	; 0x9fa <__stack+0x19b>
 9f0:	b8 2c       	mov	r11, r8
 9f2:	a3 2c       	mov	r10, r3
 9f4:	03 c0       	rjmp	.+6      	; 0x9fc <__stack+0x19d>
 9f6:	b8 2c       	mov	r11, r8
 9f8:	01 c0       	rjmp	.+2      	; 0x9fc <__stack+0x19d>
 9fa:	b9 2c       	mov	r11, r9
 9fc:	a4 fe       	sbrs	r10, 4
 9fe:	0f c0       	rjmp	.+30     	; 0xa1e <__stack+0x1bf>
 a00:	fe 01       	movw	r30, r28
 a02:	e8 0d       	add	r30, r8
 a04:	f1 1d       	adc	r31, r1
 a06:	80 81       	ld	r24, Z
 a08:	80 33       	cpi	r24, 0x30	; 48
 a0a:	21 f4       	brne	.+8      	; 0xa14 <__stack+0x1b5>
 a0c:	9a 2d       	mov	r25, r10
 a0e:	99 7e       	andi	r25, 0xE9	; 233
 a10:	a9 2e       	mov	r10, r25
 a12:	09 c0       	rjmp	.+18     	; 0xa26 <__stack+0x1c7>
 a14:	a2 fe       	sbrs	r10, 2
 a16:	06 c0       	rjmp	.+12     	; 0xa24 <__stack+0x1c5>
 a18:	b3 94       	inc	r11
 a1a:	b3 94       	inc	r11
 a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__stack+0x1c7>
 a1e:	8a 2d       	mov	r24, r10
 a20:	86 78       	andi	r24, 0x86	; 134
 a22:	09 f0       	breq	.+2      	; 0xa26 <__stack+0x1c7>
 a24:	b3 94       	inc	r11
 a26:	a3 fc       	sbrc	r10, 3
 a28:	11 c0       	rjmp	.+34     	; 0xa4c <__stack+0x1ed>
 a2a:	a0 fe       	sbrs	r10, 0
 a2c:	06 c0       	rjmp	.+12     	; 0xa3a <__stack+0x1db>
 a2e:	b2 14       	cp	r11, r2
 a30:	88 f4       	brcc	.+34     	; 0xa54 <__stack+0x1f5>
 a32:	28 0c       	add	r2, r8
 a34:	92 2c       	mov	r9, r2
 a36:	9b 18       	sub	r9, r11
 a38:	0e c0       	rjmp	.+28     	; 0xa56 <__stack+0x1f7>
 a3a:	b2 14       	cp	r11, r2
 a3c:	60 f4       	brcc	.+24     	; 0xa56 <__stack+0x1f7>
 a3e:	b6 01       	movw	r22, r12
 a40:	80 e2       	ldi	r24, 0x20	; 32
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	0e 94 8a 05 	call	0xb14	; 0xb14 <fputc>
 a48:	b3 94       	inc	r11
 a4a:	f7 cf       	rjmp	.-18     	; 0xa3a <__stack+0x1db>
 a4c:	b2 14       	cp	r11, r2
 a4e:	18 f4       	brcc	.+6      	; 0xa56 <__stack+0x1f7>
 a50:	2b 18       	sub	r2, r11
 a52:	02 c0       	rjmp	.+4      	; 0xa58 <__stack+0x1f9>
 a54:	98 2c       	mov	r9, r8
 a56:	21 2c       	mov	r2, r1
 a58:	a4 fe       	sbrs	r10, 4
 a5a:	10 c0       	rjmp	.+32     	; 0xa7c <__stack+0x21d>
 a5c:	b6 01       	movw	r22, r12
 a5e:	80 e3       	ldi	r24, 0x30	; 48
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	0e 94 8a 05 	call	0xb14	; 0xb14 <fputc>
 a66:	a2 fe       	sbrs	r10, 2
 a68:	17 c0       	rjmp	.+46     	; 0xa98 <__stack+0x239>
 a6a:	a1 fc       	sbrc	r10, 1
 a6c:	03 c0       	rjmp	.+6      	; 0xa74 <__stack+0x215>
 a6e:	88 e7       	ldi	r24, 0x78	; 120
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	02 c0       	rjmp	.+4      	; 0xa78 <__stack+0x219>
 a74:	88 e5       	ldi	r24, 0x58	; 88
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	b6 01       	movw	r22, r12
 a7a:	0c c0       	rjmp	.+24     	; 0xa94 <__stack+0x235>
 a7c:	8a 2d       	mov	r24, r10
 a7e:	86 78       	andi	r24, 0x86	; 134
 a80:	59 f0       	breq	.+22     	; 0xa98 <__stack+0x239>
 a82:	a1 fe       	sbrs	r10, 1
 a84:	02 c0       	rjmp	.+4      	; 0xa8a <__stack+0x22b>
 a86:	8b e2       	ldi	r24, 0x2B	; 43
 a88:	01 c0       	rjmp	.+2      	; 0xa8c <__stack+0x22d>
 a8a:	80 e2       	ldi	r24, 0x20	; 32
 a8c:	a7 fc       	sbrc	r10, 7
 a8e:	8d e2       	ldi	r24, 0x2D	; 45
 a90:	b6 01       	movw	r22, r12
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	0e 94 8a 05 	call	0xb14	; 0xb14 <fputc>
 a98:	89 14       	cp	r8, r9
 a9a:	38 f4       	brcc	.+14     	; 0xaaa <__stack+0x24b>
 a9c:	b6 01       	movw	r22, r12
 a9e:	80 e3       	ldi	r24, 0x30	; 48
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	0e 94 8a 05 	call	0xb14	; 0xb14 <fputc>
 aa6:	9a 94       	dec	r9
 aa8:	f7 cf       	rjmp	.-18     	; 0xa98 <__stack+0x239>
 aaa:	8a 94       	dec	r8
 aac:	f3 01       	movw	r30, r6
 aae:	e8 0d       	add	r30, r8
 ab0:	f1 1d       	adc	r31, r1
 ab2:	80 81       	ld	r24, Z
 ab4:	b6 01       	movw	r22, r12
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	0e 94 8a 05 	call	0xb14	; 0xb14 <fputc>
 abc:	81 10       	cpse	r8, r1
 abe:	f5 cf       	rjmp	.-22     	; 0xaaa <__stack+0x24b>
 ac0:	22 20       	and	r2, r2
 ac2:	09 f4       	brne	.+2      	; 0xac6 <__stack+0x267>
 ac4:	42 ce       	rjmp	.-892    	; 0x74a <vfprintf+0x24>
 ac6:	b6 01       	movw	r22, r12
 ac8:	80 e2       	ldi	r24, 0x20	; 32
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	0e 94 8a 05 	call	0xb14	; 0xb14 <fputc>
 ad0:	2a 94       	dec	r2
 ad2:	f6 cf       	rjmp	.-20     	; 0xac0 <__stack+0x261>
 ad4:	f6 01       	movw	r30, r12
 ad6:	86 81       	ldd	r24, Z+6	; 0x06
 ad8:	97 81       	ldd	r25, Z+7	; 0x07
 ada:	02 c0       	rjmp	.+4      	; 0xae0 <__stack+0x281>
 adc:	8f ef       	ldi	r24, 0xFF	; 255
 ade:	9f ef       	ldi	r25, 0xFF	; 255
 ae0:	2b 96       	adiw	r28, 0x0b	; 11
 ae2:	e2 e1       	ldi	r30, 0x12	; 18
 ae4:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__epilogue_restores__>

00000ae8 <strnlen_P>:
 ae8:	fc 01       	movw	r30, r24
 aea:	05 90       	lpm	r0, Z+
 aec:	61 50       	subi	r22, 0x01	; 1
 aee:	70 40       	sbci	r23, 0x00	; 0
 af0:	01 10       	cpse	r0, r1
 af2:	d8 f7       	brcc	.-10     	; 0xaea <strnlen_P+0x2>
 af4:	80 95       	com	r24
 af6:	90 95       	com	r25
 af8:	8e 0f       	add	r24, r30
 afa:	9f 1f       	adc	r25, r31
 afc:	08 95       	ret

00000afe <strnlen>:
 afe:	fc 01       	movw	r30, r24
 b00:	61 50       	subi	r22, 0x01	; 1
 b02:	70 40       	sbci	r23, 0x00	; 0
 b04:	01 90       	ld	r0, Z+
 b06:	01 10       	cpse	r0, r1
 b08:	d8 f7       	brcc	.-10     	; 0xb00 <strnlen+0x2>
 b0a:	80 95       	com	r24
 b0c:	90 95       	com	r25
 b0e:	8e 0f       	add	r24, r30
 b10:	9f 1f       	adc	r25, r31
 b12:	08 95       	ret

00000b14 <fputc>:
 b14:	0f 93       	push	r16
 b16:	1f 93       	push	r17
 b18:	cf 93       	push	r28
 b1a:	df 93       	push	r29
 b1c:	fb 01       	movw	r30, r22
 b1e:	23 81       	ldd	r18, Z+3	; 0x03
 b20:	21 fd       	sbrc	r18, 1
 b22:	03 c0       	rjmp	.+6      	; 0xb2a <fputc+0x16>
 b24:	8f ef       	ldi	r24, 0xFF	; 255
 b26:	9f ef       	ldi	r25, 0xFF	; 255
 b28:	2c c0       	rjmp	.+88     	; 0xb82 <fputc+0x6e>
 b2a:	22 ff       	sbrs	r18, 2
 b2c:	16 c0       	rjmp	.+44     	; 0xb5a <fputc+0x46>
 b2e:	46 81       	ldd	r20, Z+6	; 0x06
 b30:	57 81       	ldd	r21, Z+7	; 0x07
 b32:	24 81       	ldd	r18, Z+4	; 0x04
 b34:	35 81       	ldd	r19, Z+5	; 0x05
 b36:	42 17       	cp	r20, r18
 b38:	53 07       	cpc	r21, r19
 b3a:	44 f4       	brge	.+16     	; 0xb4c <fputc+0x38>
 b3c:	a0 81       	ld	r26, Z
 b3e:	b1 81       	ldd	r27, Z+1	; 0x01
 b40:	9d 01       	movw	r18, r26
 b42:	2f 5f       	subi	r18, 0xFF	; 255
 b44:	3f 4f       	sbci	r19, 0xFF	; 255
 b46:	31 83       	std	Z+1, r19	; 0x01
 b48:	20 83       	st	Z, r18
 b4a:	8c 93       	st	X, r24
 b4c:	26 81       	ldd	r18, Z+6	; 0x06
 b4e:	37 81       	ldd	r19, Z+7	; 0x07
 b50:	2f 5f       	subi	r18, 0xFF	; 255
 b52:	3f 4f       	sbci	r19, 0xFF	; 255
 b54:	37 83       	std	Z+7, r19	; 0x07
 b56:	26 83       	std	Z+6, r18	; 0x06
 b58:	14 c0       	rjmp	.+40     	; 0xb82 <fputc+0x6e>
 b5a:	8b 01       	movw	r16, r22
 b5c:	ec 01       	movw	r28, r24
 b5e:	fb 01       	movw	r30, r22
 b60:	00 84       	ldd	r0, Z+8	; 0x08
 b62:	f1 85       	ldd	r31, Z+9	; 0x09
 b64:	e0 2d       	mov	r30, r0
 b66:	09 95       	icall
 b68:	89 2b       	or	r24, r25
 b6a:	e1 f6       	brne	.-72     	; 0xb24 <fputc+0x10>
 b6c:	d8 01       	movw	r26, r16
 b6e:	16 96       	adiw	r26, 0x06	; 6
 b70:	8d 91       	ld	r24, X+
 b72:	9c 91       	ld	r25, X
 b74:	17 97       	sbiw	r26, 0x07	; 7
 b76:	01 96       	adiw	r24, 0x01	; 1
 b78:	17 96       	adiw	r26, 0x07	; 7
 b7a:	9c 93       	st	X, r25
 b7c:	8e 93       	st	-X, r24
 b7e:	16 97       	sbiw	r26, 0x06	; 6
 b80:	ce 01       	movw	r24, r28
 b82:	df 91       	pop	r29
 b84:	cf 91       	pop	r28
 b86:	1f 91       	pop	r17
 b88:	0f 91       	pop	r16
 b8a:	08 95       	ret

00000b8c <__ultoa_invert>:
 b8c:	fa 01       	movw	r30, r20
 b8e:	aa 27       	eor	r26, r26
 b90:	28 30       	cpi	r18, 0x08	; 8
 b92:	51 f1       	breq	.+84     	; 0xbe8 <__ultoa_invert+0x5c>
 b94:	20 31       	cpi	r18, 0x10	; 16
 b96:	81 f1       	breq	.+96     	; 0xbf8 <__ultoa_invert+0x6c>
 b98:	e8 94       	clt
 b9a:	6f 93       	push	r22
 b9c:	6e 7f       	andi	r22, 0xFE	; 254
 b9e:	6e 5f       	subi	r22, 0xFE	; 254
 ba0:	7f 4f       	sbci	r23, 0xFF	; 255
 ba2:	8f 4f       	sbci	r24, 0xFF	; 255
 ba4:	9f 4f       	sbci	r25, 0xFF	; 255
 ba6:	af 4f       	sbci	r26, 0xFF	; 255
 ba8:	b1 e0       	ldi	r27, 0x01	; 1
 baa:	3e d0       	rcall	.+124    	; 0xc28 <__ultoa_invert+0x9c>
 bac:	b4 e0       	ldi	r27, 0x04	; 4
 bae:	3c d0       	rcall	.+120    	; 0xc28 <__ultoa_invert+0x9c>
 bb0:	67 0f       	add	r22, r23
 bb2:	78 1f       	adc	r23, r24
 bb4:	89 1f       	adc	r24, r25
 bb6:	9a 1f       	adc	r25, r26
 bb8:	a1 1d       	adc	r26, r1
 bba:	68 0f       	add	r22, r24
 bbc:	79 1f       	adc	r23, r25
 bbe:	8a 1f       	adc	r24, r26
 bc0:	91 1d       	adc	r25, r1
 bc2:	a1 1d       	adc	r26, r1
 bc4:	6a 0f       	add	r22, r26
 bc6:	71 1d       	adc	r23, r1
 bc8:	81 1d       	adc	r24, r1
 bca:	91 1d       	adc	r25, r1
 bcc:	a1 1d       	adc	r26, r1
 bce:	20 d0       	rcall	.+64     	; 0xc10 <__ultoa_invert+0x84>
 bd0:	09 f4       	brne	.+2      	; 0xbd4 <__ultoa_invert+0x48>
 bd2:	68 94       	set
 bd4:	3f 91       	pop	r19
 bd6:	2a e0       	ldi	r18, 0x0A	; 10
 bd8:	26 9f       	mul	r18, r22
 bda:	11 24       	eor	r1, r1
 bdc:	30 19       	sub	r19, r0
 bde:	30 5d       	subi	r19, 0xD0	; 208
 be0:	31 93       	st	Z+, r19
 be2:	de f6       	brtc	.-74     	; 0xb9a <__ultoa_invert+0xe>
 be4:	cf 01       	movw	r24, r30
 be6:	08 95       	ret
 be8:	46 2f       	mov	r20, r22
 bea:	47 70       	andi	r20, 0x07	; 7
 bec:	40 5d       	subi	r20, 0xD0	; 208
 bee:	41 93       	st	Z+, r20
 bf0:	b3 e0       	ldi	r27, 0x03	; 3
 bf2:	0f d0       	rcall	.+30     	; 0xc12 <__ultoa_invert+0x86>
 bf4:	c9 f7       	brne	.-14     	; 0xbe8 <__ultoa_invert+0x5c>
 bf6:	f6 cf       	rjmp	.-20     	; 0xbe4 <__ultoa_invert+0x58>
 bf8:	46 2f       	mov	r20, r22
 bfa:	4f 70       	andi	r20, 0x0F	; 15
 bfc:	40 5d       	subi	r20, 0xD0	; 208
 bfe:	4a 33       	cpi	r20, 0x3A	; 58
 c00:	18 f0       	brcs	.+6      	; 0xc08 <__ultoa_invert+0x7c>
 c02:	49 5d       	subi	r20, 0xD9	; 217
 c04:	31 fd       	sbrc	r19, 1
 c06:	40 52       	subi	r20, 0x20	; 32
 c08:	41 93       	st	Z+, r20
 c0a:	02 d0       	rcall	.+4      	; 0xc10 <__ultoa_invert+0x84>
 c0c:	a9 f7       	brne	.-22     	; 0xbf8 <__ultoa_invert+0x6c>
 c0e:	ea cf       	rjmp	.-44     	; 0xbe4 <__ultoa_invert+0x58>
 c10:	b4 e0       	ldi	r27, 0x04	; 4
 c12:	a6 95       	lsr	r26
 c14:	97 95       	ror	r25
 c16:	87 95       	ror	r24
 c18:	77 95       	ror	r23
 c1a:	67 95       	ror	r22
 c1c:	ba 95       	dec	r27
 c1e:	c9 f7       	brne	.-14     	; 0xc12 <__ultoa_invert+0x86>
 c20:	00 97       	sbiw	r24, 0x00	; 0
 c22:	61 05       	cpc	r22, r1
 c24:	71 05       	cpc	r23, r1
 c26:	08 95       	ret
 c28:	9b 01       	movw	r18, r22
 c2a:	ac 01       	movw	r20, r24
 c2c:	0a 2e       	mov	r0, r26
 c2e:	06 94       	lsr	r0
 c30:	57 95       	ror	r21
 c32:	47 95       	ror	r20
 c34:	37 95       	ror	r19
 c36:	27 95       	ror	r18
 c38:	ba 95       	dec	r27
 c3a:	c9 f7       	brne	.-14     	; 0xc2e <__ultoa_invert+0xa2>
 c3c:	62 0f       	add	r22, r18
 c3e:	73 1f       	adc	r23, r19
 c40:	84 1f       	adc	r24, r20
 c42:	95 1f       	adc	r25, r21
 c44:	a0 1d       	adc	r26, r0
 c46:	08 95       	ret

00000c48 <__prologue_saves__>:
 c48:	2f 92       	push	r2
 c4a:	3f 92       	push	r3
 c4c:	4f 92       	push	r4
 c4e:	5f 92       	push	r5
 c50:	6f 92       	push	r6
 c52:	7f 92       	push	r7
 c54:	8f 92       	push	r8
 c56:	9f 92       	push	r9
 c58:	af 92       	push	r10
 c5a:	bf 92       	push	r11
 c5c:	cf 92       	push	r12
 c5e:	df 92       	push	r13
 c60:	ef 92       	push	r14
 c62:	ff 92       	push	r15
 c64:	0f 93       	push	r16
 c66:	1f 93       	push	r17
 c68:	cf 93       	push	r28
 c6a:	df 93       	push	r29
 c6c:	cd b7       	in	r28, 0x3d	; 61
 c6e:	de b7       	in	r29, 0x3e	; 62
 c70:	ca 1b       	sub	r28, r26
 c72:	db 0b       	sbc	r29, r27
 c74:	0f b6       	in	r0, 0x3f	; 63
 c76:	f8 94       	cli
 c78:	de bf       	out	0x3e, r29	; 62
 c7a:	0f be       	out	0x3f, r0	; 63
 c7c:	cd bf       	out	0x3d, r28	; 61
 c7e:	09 94       	ijmp

00000c80 <__epilogue_restores__>:
 c80:	2a 88       	ldd	r2, Y+18	; 0x12
 c82:	39 88       	ldd	r3, Y+17	; 0x11
 c84:	48 88       	ldd	r4, Y+16	; 0x10
 c86:	5f 84       	ldd	r5, Y+15	; 0x0f
 c88:	6e 84       	ldd	r6, Y+14	; 0x0e
 c8a:	7d 84       	ldd	r7, Y+13	; 0x0d
 c8c:	8c 84       	ldd	r8, Y+12	; 0x0c
 c8e:	9b 84       	ldd	r9, Y+11	; 0x0b
 c90:	aa 84       	ldd	r10, Y+10	; 0x0a
 c92:	b9 84       	ldd	r11, Y+9	; 0x09
 c94:	c8 84       	ldd	r12, Y+8	; 0x08
 c96:	df 80       	ldd	r13, Y+7	; 0x07
 c98:	ee 80       	ldd	r14, Y+6	; 0x06
 c9a:	fd 80       	ldd	r15, Y+5	; 0x05
 c9c:	0c 81       	ldd	r16, Y+4	; 0x04
 c9e:	1b 81       	ldd	r17, Y+3	; 0x03
 ca0:	aa 81       	ldd	r26, Y+2	; 0x02
 ca2:	b9 81       	ldd	r27, Y+1	; 0x01
 ca4:	ce 0f       	add	r28, r30
 ca6:	d1 1d       	adc	r29, r1
 ca8:	0f b6       	in	r0, 0x3f	; 63
 caa:	f8 94       	cli
 cac:	de bf       	out	0x3e, r29	; 62
 cae:	0f be       	out	0x3f, r0	; 63
 cb0:	cd bf       	out	0x3d, r28	; 61
 cb2:	ed 01       	movw	r28, r26
 cb4:	08 95       	ret

00000cb6 <_exit>:
 cb6:	f8 94       	cli

00000cb8 <__stop_program>:
 cb8:	ff cf       	rjmp	.-2      	; 0xcb8 <__stop_program>
